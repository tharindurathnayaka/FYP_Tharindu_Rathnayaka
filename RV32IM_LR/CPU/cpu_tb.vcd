$date
	Sun Sep 24 13:35:02 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$scope module dut $end
$var wire 1 ! CLK $end
$var wire 32 " DATA_MEM_ADDR [31:0] $end
$var wire 1 # DATA_MEM_BUSYWAIT $end
$var wire 4 $ DATA_MEM_READ [3:0] $end
$var wire 32 % DATA_MEM_READ_DATA [31:0] $end
$var wire 3 & DATA_MEM_WRITE [2:0] $end
$var wire 32 ' INSTRUCTION [31:0] $end
$var wire 1 ( INSTR_MEM_BUSYWAIT $end
$var wire 1 ) RESET $end
$var wire 32 * WB_WRITEBACK_VALUE [31:0] $end
$var wire 2 + WB_WB_VALUE_SELECT [1:0] $end
$var wire 1 , WB_REG_WRITE_EN $end
$var wire 5 - WB_REG_WRITE_ADDR [4:0] $end
$var wire 32 . WB_PC [31:0] $end
$var wire 32 / WB_DATA_MEM_READ_DATA [31:0] $end
$var wire 1 0 WB_DATA_MEM_READ $end
$var wire 32 1 WB_ALU_OUT [31:0] $end
$var wire 32 2 PC_SELECT_OUT [31:0] $end
$var wire 32 3 PC_PLUS_4 [31:0] $end
$var wire 32 4 PC_NEXT [31:0] $end
$var wire 1 5 MEM_WRITE_DATA_SEL $end
$var wire 2 6 MEM_WB_VALUE_SELECT [1:0] $end
$var wire 1 7 MEM_REG_WRITE_EN $end
$var wire 5 8 MEM_REG_WRITE_ADDR [4:0] $end
$var wire 5 9 MEM_REG_READ_ADDR2 [4:0] $end
$var wire 32 : MEM_REG_DATA2 [31:0] $end
$var wire 32 ; MEM_PC_PLUS_4 [31:0] $end
$var wire 32 < MEM_PC [31:0] $end
$var wire 3 = MEM_DATA_MEM_WRITE [2:0] $end
$var wire 4 > MEM_DATA_MEM_READ [3:0] $end
$var wire 32 ? MEM_ALU_OUT [31:0] $end
$var wire 2 @ ID_WB_VALUE_SELECT [1:0] $end
$var wire 1 A ID_REG_WRITE_EN $end
$var wire 32 B ID_REG_DATA2 [31:0] $end
$var wire 32 C ID_REG_DATA1 [31:0] $end
$var wire 1 D ID_PR_IF_ID_RESET $end
$var wire 1 E ID_PR_IF_ID_HOLD $end
$var wire 1 F ID_PR_ID_EX_RESET $end
$var wire 32 G ID_PC [31:0] $end
$var wire 1 H ID_OPERAND2_SELECT $end
$var wire 1 I ID_OPERAND1_SELECT $end
$var wire 1 J ID_LU_HAZ_SIG $end
$var wire 32 K ID_INSTRUCTION [31:0] $end
$var wire 3 L ID_IMMEDIATE_SELECT [2:0] $end
$var wire 32 M ID_IMMEDIATE [31:0] $end
$var wire 3 N ID_DATA_MEM_WRITE [2:0] $end
$var wire 4 O ID_DATA_MEM_READ [3:0] $end
$var wire 4 P ID_BRANCH_CTRL [3:0] $end
$var wire 6 Q ID_ALU_SELECT [5:0] $end
$var wire 2 R EX_WB_VALUE_SELECT [1:0] $end
$var wire 1 S EX_REG_WRITE_EN $end
$var wire 5 T EX_REG_WRITE_ADDR [4:0] $end
$var wire 5 U EX_REG_READ_ADDR2 [4:0] $end
$var wire 5 V EX_REG_READ_ADDR1 [4:0] $end
$var wire 32 W EX_REG_DATA2 [31:0] $end
$var wire 32 X EX_REG_DATA1 [31:0] $end
$var wire 32 Y EX_PC [31:0] $end
$var wire 1 Z EX_OPERAND2_SELECT $end
$var wire 1 [ EX_OPERAND1_SELECT $end
$var wire 2 \ EX_OP2_FWD_SEL [1:0] $end
$var wire 32 ] EX_OP2_FWD_MUX_OUT [31:0] $end
$var wire 2 ^ EX_OP1_FWD_SEL [1:0] $end
$var wire 32 _ EX_OP1_FWD_MUX_OUT [31:0] $end
$var wire 32 ` EX_IMMEDIATE [31:0] $end
$var wire 3 a EX_DATA_MEM_WRITE [2:0] $end
$var wire 4 b EX_DATA_MEM_READ [3:0] $end
$var wire 1 c EX_BRANCH_SELECT $end
$var wire 4 d EX_BRANCH_CTRL [3:0] $end
$var wire 6 e EX_ALU_SELECT [5:0] $end
$var wire 32 f EX_ALU_OUT [31:0] $end
$var wire 32 g EX_ALU_DATA2 [31:0] $end
$var wire 32 h EX_ALU_DATA1 [31:0] $end
$var wire 32 i DATA_MEM_WRITE_DATA [31:0] $end
$var reg 32 j PC [31:0] $end
$scope module BRANCH_SELECT_MUX $end
$var wire 1 c SELECT $end
$var wire 32 k INPUT2 [31:0] $end
$var wire 32 l INPUT1 [31:0] $end
$var reg 32 m RESULT [31:0] $end
$upscope $end
$scope module EX_ALU $end
$var wire 32 n INTER_AND [31:0] $end
$var wire 32 o INTER_FWD [31:0] $end
$var wire 32 p INTER_OR [31:0] $end
$var wire 32 q INTER_XOR [31:0] $end
$var wire 6 r SELECT [5:0] $end
$var wire 32 s INTER_SUB [31:0] $end
$var wire 32 t INTER_SRL [31:0] $end
$var wire 32 u INTER_SRA [31:0] $end
$var wire 32 v INTER_SLTU [31:0] $end
$var wire 32 w INTER_SLT [31:0] $end
$var wire 32 x INTER_SLL [31:0] $end
$var wire 32 y INTER_REMU [31:0] $end
$var wire 32 z INTER_REM [31:0] $end
$var wire 64 { INTER_MULHU64 [63:0] $end
$var wire 32 | INTER_MULHU [31:0] $end
$var wire 32 } INTER_MULHSU [31:0] $end
$var wire 64 ~ INTER_MULH64 [63:0] $end
$var wire 32 !" INTER_MULH [31:0] $end
$var wire 32 "" INTER_MUL [31:0] $end
$var wire 32 #" INTER_DIVU [31:0] $end
$var wire 32 $" INTER_DIV [31:0] $end
$var wire 32 %" INTER_ADD [31:0] $end
$var wire 32 &" DATA2 [31:0] $end
$var wire 32 '" DATA1 [31:0] $end
$var reg 64 (" INTER_MULHSU64 [63:0] $end
$var reg 32 )" RESULT [31:0] $end
$upscope $end
$scope module EX_BRANCH_CTRL_UNIT $end
$var wire 4 *" SELECT [3:0] $end
$var wire 32 +" DATA2 [31:0] $end
$var wire 32 ," DATA1 [31:0] $end
$var wire 1 -" BNE $end
$var wire 1 ." BLTU $end
$var wire 1 /" BLT $end
$var wire 1 0" BGEU $end
$var wire 1 1" BGE $end
$var wire 1 2" BEQ $end
$var reg 1 c PC_MUX_OUT $end
$upscope $end
$scope module EX_FWD_UNIT $end
$var wire 1 , WB_WRITE_EN $end
$var wire 5 3" WB_ADDR [4:0] $end
$var wire 1 7 MEM_WRITE_EN $end
$var wire 5 4" MEM_ADDR [4:0] $end
$var wire 5 5" ADDR2 [4:0] $end
$var wire 5 6" ADDR1 [4:0] $end
$var reg 2 7" OP1_FWD_SEL [1:0] $end
$var reg 2 8" OP2_FWD_SEL [1:0] $end
$upscope $end
$scope module EX_OP1_FWD_MUX $end
$var wire 32 9" INPUT4 [31:0] $end
$var wire 2 :" SELECT [1:0] $end
$var wire 32 ;" INPUT3 [31:0] $end
$var wire 32 <" INPUT2 [31:0] $end
$var wire 32 =" INPUT1 [31:0] $end
$var reg 32 >" RESULT [31:0] $end
$upscope $end
$scope module EX_OP1_SELECT_MUX $end
$var wire 32 ?" INPUT1 [31:0] $end
$var wire 1 [ SELECT $end
$var wire 32 @" INPUT2 [31:0] $end
$var reg 32 A" RESULT [31:0] $end
$upscope $end
$scope module EX_OP2_FWD_MUX $end
$var wire 32 B" INPUT4 [31:0] $end
$var wire 2 C" SELECT [1:0] $end
$var wire 32 D" INPUT3 [31:0] $end
$var wire 32 E" INPUT2 [31:0] $end
$var wire 32 F" INPUT1 [31:0] $end
$var reg 32 G" RESULT [31:0] $end
$upscope $end
$scope module EX_OP2_SELECT_MUX $end
$var wire 32 H" INPUT1 [31:0] $end
$var wire 1 Z SELECT $end
$var wire 32 I" INPUT2 [31:0] $end
$var reg 32 J" RESULT [31:0] $end
$upscope $end
$scope module ID_CONTROL_UNIT $end
$var wire 1 I OPERAND1_SELECT $end
$var wire 1 H OPERAND2_SELECT $end
$var wire 1 A REG_WRITE_EN $end
$var wire 1 K" funct3_mux_select $end
$var wire 7 L" opcode [6:0] $end
$var wire 7 M" funct7 [6:0] $end
$var wire 3 N" funct3 [2:0] $end
$var wire 2 O" WRITEBACK_VALUE_SELECT [1:0] $end
$var wire 32 P" INSTRUCTION [31:0] $end
$var wire 3 Q" IMMEDIATE_SELECT [2:0] $end
$var wire 3 R" DATA_MEM_WRITE [2:0] $end
$var wire 4 S" DATA_MEM_READ [3:0] $end
$var wire 4 T" BRANCH_CTRL [3:0] $end
$var wire 6 U" ALU_SELECT [5:0] $end
$scope module funct3_mux $end
$var wire 3 V" INPUT1 [2:0] $end
$var wire 3 W" INPUT2 [2:0] $end
$var wire 1 K" SELECT $end
$var reg 3 X" RESULT [2:0] $end
$upscope $end
$upscope $end
$scope module ID_HAZ_DETECT_UNIT $end
$var wire 1 Y" EX_DATA_MEM_READ $end
$var wire 5 Z" ID_ADDR1 [4:0] $end
$var wire 5 [" ID_ADDR2 [4:0] $end
$var wire 1 I ID_OPERAND1_SELECT $end
$var wire 1 H ID_OPERAND2_SELECT $end
$var wire 5 \" EX_REG_WRITE_ADDR [4:0] $end
$var reg 1 J LU_HAZ_SIG $end
$upscope $end
$scope module ID_IMMEDIATE_SELECT_UNIT $end
$var wire 3 ]" SELECT [2:0] $end
$var wire 32 ^" TYPE_U [31:0] $end
$var wire 32 _" TYPE_S [31:0] $end
$var wire 32 `" TYPE_J [31:0] $end
$var wire 32 a" TYPE_I [31:0] $end
$var wire 32 b" TYPE_B [31:0] $end
$var wire 32 c" INSTRUCTION [31:0] $end
$var reg 32 d" OUTPUT [31:0] $end
$upscope $end
$scope module ID_PR_FLUSH_UNIT $end
$var wire 1 c BJ_SIG $end
$var wire 1 J LU_HAZ_SIG $end
$var wire 1 F PR_ID_EX_RESET $end
$var wire 1 E PR_IF_ID_HOLD $end
$var wire 1 D PR_IF_ID_RESET $end
$upscope $end
$scope module ID_REG_FILE $end
$var wire 1 ! CLK $end
$var wire 5 e" OUT1_ADDRESS [4:0] $end
$var wire 5 f" OUT2_ADDRESS [4:0] $end
$var wire 1 ) RESET $end
$var wire 1 , WRITE_EN $end
$var wire 5 g" IN_ADDRESS [4:0] $end
$var wire 32 h" DATA_IN [31:0] $end
$var reg 32 i" DATA_OUT1 [31:0] $end
$var reg 32 j" DATA_OUT2 [31:0] $end
$var integer 32 k" i [31:0] $end
$upscope $end
$scope module IF_PC_PLUS_4_ADDER $end
$var wire 32 l" IN [31:0] $end
$var wire 32 m" OUT [31:0] $end
$upscope $end
$scope module MEM_FWD_UNIT $end
$var wire 1 n" MEM_DATA_MEM_WRITE $end
$var wire 1 0 WB_DATA_MEM_READ $end
$var wire 5 o" WB_ADDR [4:0] $end
$var wire 5 p" MEM_ADDR [4:0] $end
$var reg 1 5 MEM_FWD_SEL $end
$upscope $end
$scope module MEM_PC_PLUS_4_ADDER $end
$var wire 32 q" OUT [31:0] $end
$var wire 32 r" IN [31:0] $end
$upscope $end
$scope module MEM_WRITE_DATA_FWD_MUX $end
$var wire 1 5 SELECT $end
$var wire 32 s" INPUT2 [31:0] $end
$var wire 32 t" INPUT1 [31:0] $end
$var reg 32 u" RESULT [31:0] $end
$upscope $end
$scope module PC_SELECT_MUX $end
$var wire 32 v" INPUT1 [31:0] $end
$var wire 32 w" INPUT2 [31:0] $end
$var wire 1 J SELECT $end
$var reg 32 x" RESULT [31:0] $end
$upscope $end
$scope module PIPE_REG_EX_MEM $end
$var wire 1 ! CLK $end
$var wire 32 y" EX_ALU_OUT [31:0] $end
$var wire 32 z" EX_REG_DATA2 [31:0] $end
$var wire 1 ) RESET $end
$var wire 2 {" EX_WB_VALUE_SELECT [1:0] $end
$var wire 1 S EX_REG_WRITE_EN $end
$var wire 5 |" EX_REG_WRITE_ADDR [4:0] $end
$var wire 5 }" EX_REG_READ_ADDR2 [4:0] $end
$var wire 32 ~" EX_PC [31:0] $end
$var wire 3 !# EX_DATA_MEM_WRITE [2:0] $end
$var wire 4 "# EX_DATA_MEM_READ [3:0] $end
$var reg 32 ## MEM_ALU_OUT [31:0] $end
$var reg 4 $# MEM_DATA_MEM_READ [3:0] $end
$var reg 3 %# MEM_DATA_MEM_WRITE [2:0] $end
$var reg 32 &# MEM_PC [31:0] $end
$var reg 32 '# MEM_REG_DATA2 [31:0] $end
$var reg 5 (# MEM_REG_READ_ADDR2 [4:0] $end
$var reg 5 )# MEM_REG_WRITE_ADDR [4:0] $end
$var reg 1 7 MEM_REG_WRITE_EN $end
$var reg 2 *# MEM_WB_VALUE_SELECT [1:0] $end
$upscope $end
$scope module PIPE_REG_ID_EX $end
$var wire 1 ! CLK $end
$var wire 6 +# ID_ALU_SELECT [5:0] $end
$var wire 4 ,# ID_BRANCH_CTRL [3:0] $end
$var wire 4 -# ID_DATA_MEM_READ [3:0] $end
$var wire 3 .# ID_DATA_MEM_WRITE [2:0] $end
$var wire 32 /# ID_IMMEDIATE [31:0] $end
$var wire 1 I ID_OPERAND1_SELECT $end
$var wire 1 H ID_OPERAND2_SELECT $end
$var wire 32 0# ID_REG_DATA1 [31:0] $end
$var wire 32 1# ID_REG_DATA2 [31:0] $end
$var wire 5 2# ID_REG_READ_ADDR1 [4:0] $end
$var wire 5 3# ID_REG_READ_ADDR2 [4:0] $end
$var wire 5 4# ID_REG_WRITE_ADDR [4:0] $end
$var wire 1 A ID_REG_WRITE_EN $end
$var wire 2 5# ID_WB_VALUE_SELECT [1:0] $end
$var wire 1 6# RESET $end
$var wire 32 7# ID_PC [31:0] $end
$var reg 6 8# EX_ALU_SELECT [5:0] $end
$var reg 4 9# EX_BRANCH_CTRL [3:0] $end
$var reg 4 :# EX_DATA_MEM_READ [3:0] $end
$var reg 3 ;# EX_DATA_MEM_WRITE [2:0] $end
$var reg 32 <# EX_IMMEDIATE [31:0] $end
$var reg 1 [ EX_OPERAND1_SELECT $end
$var reg 1 Z EX_OPERAND2_SELECT $end
$var reg 32 =# EX_PC [31:0] $end
$var reg 32 ># EX_REG_DATA1 [31:0] $end
$var reg 32 ?# EX_REG_DATA2 [31:0] $end
$var reg 5 @# EX_REG_READ_ADDR1 [4:0] $end
$var reg 5 A# EX_REG_READ_ADDR2 [4:0] $end
$var reg 5 B# EX_REG_WRITE_ADDR [4:0] $end
$var reg 1 S EX_REG_WRITE_EN $end
$var reg 2 C# EX_WB_VALUE_SELECT [1:0] $end
$upscope $end
$scope module PIPE_REG_IF_ID $end
$var wire 1 ! CLK $end
$var wire 1 E HOLD $end
$var wire 32 D# IF_INSTRUCTION [31:0] $end
$var wire 32 E# IF_PC [31:0] $end
$var wire 1 F# RESET $end
$var reg 32 G# ID_INSTRUCTION [31:0] $end
$var reg 32 H# ID_PC [31:0] $end
$upscope $end
$scope module PIPE_REG_MEM_WB $end
$var wire 1 ! CLK $end
$var wire 32 I# MEM_ALU_OUT [31:0] $end
$var wire 1 J# MEM_DATA_MEM_READ $end
$var wire 32 K# MEM_DATA_MEM_READ_DATA [31:0] $end
$var wire 32 L# MEM_PC [31:0] $end
$var wire 5 M# MEM_REG_WRITE_ADDR [4:0] $end
$var wire 1 7 MEM_REG_WRITE_EN $end
$var wire 2 N# MEM_WB_VALUE_SELECT [1:0] $end
$var wire 1 ) RESET $end
$var reg 32 O# WB_ALU_OUT [31:0] $end
$var reg 1 0 WB_DATA_MEM_READ $end
$var reg 32 P# WB_DATA_MEM_READ_DATA [31:0] $end
$var reg 32 Q# WB_PC [31:0] $end
$var reg 5 R# WB_REG_WRITE_ADDR [4:0] $end
$var reg 1 , WB_REG_WRITE_EN $end
$var reg 2 S# WB_WB_VALUE_SELECT [1:0] $end
$upscope $end
$scope module WB_WB_VALUE_SELECT_MUX $end
$var wire 32 T# INPUT1 [31:0] $end
$var wire 32 U# INPUT2 [31:0] $end
$var wire 32 V# INPUT3 [31:0] $end
$var wire 32 W# INPUT4 [31:0] $end
$var wire 2 X# SELECT [1:0] $end
$var reg 32 Y# RESULT [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 Z# \REGISTERS[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 [# \REGISTERS[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 \# \REGISTERS[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 ]# \REGISTERS[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 ^# \REGISTERS[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 _# \REGISTERS[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 `# \REGISTERS[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 a# \REGISTERS[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 b# \REGISTERS[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 c# \REGISTERS[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 d# \REGISTERS[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 e# \REGISTERS[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 f# \REGISTERS[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 g# \REGISTERS[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 h# \REGISTERS[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 i# \REGISTERS[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 j# \REGISTERS[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 k# \REGISTERS[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 l# \REGISTERS[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 m# \REGISTERS[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 n# \REGISTERS[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 o# \REGISTERS[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 p# \REGISTERS[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 q# \REGISTERS[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 r# \REGISTERS[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 s# \REGISTERS[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 t# \REGISTERS[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 u# \REGISTERS[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 v# \REGISTERS[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 w# \REGISTERS[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 x# \REGISTERS[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 y# \REGISTERS[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
bx p#
bx o#
bx n#
bx m#
bx l#
bx k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
bx ]#
bx \#
bx [#
bx Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
bx L#
bx K#
0J#
b0 I#
b0 H#
b0 G#
1F#
b0 E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
b0 7#
16#
bx 5#
b0 4#
b0 3#
b0 2#
bx 1#
bx 0#
b0 /#
bx .#
bx -#
bx ,#
bzxx000 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
b0 w"
bx v"
b0 u"
b0 t"
b0 s"
b0 r"
bx q"
b0 p"
b0 o"
0n"
bx m"
b0 l"
b100000 k"
bx j"
bx i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
bx ]"
bx \"
b0 ["
b0 Z"
xY"
b0 X"
b0 W"
b0 V"
bzxx000 U"
bx T"
bx S"
bx R"
bx Q"
b0 P"
bx O"
b0 N"
b0 M"
b0 L"
xK"
bx J"
bx I"
bx H"
bx G"
bx F"
b0 E"
b0 D"
b0 C"
b0 B"
bx A"
bx @"
bx ?"
bx >"
bx ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
bx 6"
bx 5"
b0 4"
b0 3"
x2"
x1"
x0"
x/"
x."
x-"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
b0 j
b0 i
bx h
bx g
bx f
bx e
bx d
xc
bx b
bx a
bx `
bx _
b0 ^
bx ]
b0 \
x[
xZ
bx Y
bx X
bx W
bx V
bx U
bx T
xS
bx R
bzxx000 Q
bx P
bx O
bx N
b0 M
bx L
b0 K
0J
xI
xH
b0 G
xF
0E
xD
bx C
bx B
xA
bx @
b0 ?
b0 >
b0 =
b0 <
bx ;
b0 :
b0 9
b0 8
07
b0 6
05
bx 4
bx 3
bx 2
b0 1
00
b0 /
b0 .
b0 -
0,
b0 +
b0 *
1)
0(
bx '
b0 &
bx %
b0 $
0#
b0 "
1!
$end
#10
b0 h
b0 '"
b0 A"
0Y"
b0 o
b0 g
b0 &"
b0 J"
10"
0."
11"
0/"
0-"
12"
b0 ]
b0 +"
b0 G"
b0 H"
b0 z"
b0 _
b0 ,"
b0 >"
b0 ?"
b100 2
b100 l
b100 x"
b0 R
b0 {"
b0 C#
b0 d
b0 *"
b0 9#
b0 b
b0 "#
b0 :#
b0 a
b0 !#
b0 ;#
0S
0Z
0[
b0 e
b0 r
b0 8#
b0 U
b0 5"
b0 }"
b0 A#
b0 V
b0 6"
b0 @#
b0 T
b0 \"
b0 |"
b0 B#
b0 `
b0 I"
b0 <#
b0 W
b0 F"
b0 ?#
b0 X
b0 ="
b0 >#
b0 Y
b0 @"
b0 ~"
b0 =#
b100 ;
b100 q"
b100 L#
b100 3
b100 m"
b100 v"
b0x v
b0x w
#20
b0 y#
b0 x#
b0 w#
b0 v#
b0 u#
b0 t#
b0 s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
b0 m#
b0 l#
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 f
b0 k
b0 )"
b0 y"
0F
b100 4
b100 m
b0 v
b0 w
b0 q
b0 p
b0 n
b0 s
b0 %"
0D
0c
#30
b0 u
b0 t
b0 x
0H
0K"
0A
0I
b0 P
b0 T"
b0 ,#
bz00000 Q
bz00000 U"
bz00000 +#
b0 N
b0 R"
b0 .#
b0 O
b0 S"
b0 -#
b10 @
b10 O"
b10 5#
#50
0!
#60
b0 }
b0 |
b0 !"
b0 ("
b0 {
b0 ~
b0 ""
#70
b0 B
b0 j"
b0 1#
b0 C
b0 i"
b0 0#
#100
bz00001 Q
bz00001 U"
bz00001 +#
b1 X"
b100 *
b100 ;"
b100 D"
b100 h"
b100 s"
b100 Y#
b1000000000000 `"
b1000000000000 ^"
b100000000000 b"
b1 _"
b1 N"
b1 V"
b110111 L"
b1 4#
b100 j
b100 l"
b100 w"
b100 E#
bx /
bx P#
bx U#
b100 .
b100 Q#
b100 T#
b1000010110111 K
b1000010110111 P"
b1000010110111 c"
b1000010110111 G#
0F#
06#
1!
b1000010110111 '
b1000010110111 D#
0)
#110
b1000 4
b1000 m
b1000 2
b1000 l
b1000 x"
b1000 3
b1000 m"
b1000 v"
b10 R
b10 {"
b10 C#
bz00001 e
bz00001 r
bz00001 8#
b1 T
b1 \"
b1 |"
b1 B#
#130
b1000000000000 M
b1000000000000 d"
b1000000000000 /#
1H
1A
b0 L
b0 Q"
b0 ]"
b1 N
b1 R"
b1 .#
b1 P
b1 T"
b1 ,#
bz11001 Q
bz11001 U"
bz11001 +#
b1 O
b1 S"
b1 -#
#150
0!
#200
b1000 G
b1000 7#
b1000 H#
b10 6
b10 *#
b10 N#
b1 8
b1 4"
b1 )#
b1 M#
b1000 j
b1000 l"
b1000 w"
b1000 E#
1!
#210
b1100 4
b1100 m
b1100 2
b1100 l
b1100 x"
b1000000000000 f
b1000000000000 k
b1000000000000 )"
b1000000000000 y"
b1000000000000 o
b1000000000000 g
b1000000000000 &"
b1000000000000 J"
b1100 3
b1100 m"
b1100 v"
b1 d
b1 *"
b1 9#
b1 b
b1 "#
b1 :#
b1 a
b1 !#
b1 ;#
1S
1Z
bz11001 e
bz11001 r
bz11001 8#
b1000000000000 `
b1000000000000 I"
b1000000000000 <#
b1000 Y
b1000 @"
b1000 ~"
b1000 =#
#220
b1 v
b1 w
b1000000000000 q
b1000000000000 p
b11111111111111111111000000000000 s
b1000000000000 %"
#250
0!
#290
b0 y
b0 z
b0 #"
b0 $"
#300
b1000000000000 *
b1000000000000 ;"
b1000000000000 D"
b1000000000000 h"
b1000000000000 s"
b1000000000000 Y#
b1100 j
b1100 l"
b1100 w"
b1100 E#
b10 +
b10 S#
b10 X#
1,
b1 -
b1 3"
b1 g"
b1 o"
b1 R#
b1000000000000 1
b1000000000000 O#
b1000000000000 V#
b1 $
b1 >
b1 $#
b1 &
b1 =
b1 %#
17
b1000000000000 "
b1000000000000 ?
b1000000000000 <"
b1000000000000 E"
b1000000000000 ##
b1000000000000 I#
b1000 <
b1000 r"
b1000 &#
1!
#310
b10000 4
b10000 m
b10000 2
b10000 l
b10000 x"
b10000 3
b10000 m"
b10000 v"
b1100 ;
b1100 q"
b1100 L#
#350
0!
#400
b10000 G
b10000 7#
b10000 H#
b1100 .
b1100 Q#
b1100 T#
b10000 j
b10000 l"
b10000 w"
b10000 E#
1!
#410
b10100 4
b10100 m
b10100 2
b10100 l
b10100 x"
b10100 3
b10100 m"
b10100 v"
b10000 Y
b10000 @"
b10000 ~"
b10000 =#
#420
b1000000000000 [#
#450
0!
#500
b0 M
b0 d"
b0 /#
bz11000 Q
bz11000 U"
bz11000 +#
b0 X"
b0 *
b0 ;"
b0 D"
b0 h"
b0 s"
b0 Y#
b0 `"
b0 ^"
b0 b"
b0 _"
b0 N"
b0 V"
b0 L"
b0 4#
b0 j
b0 l"
b0 w"
b0 E#
b0 +
b0 S#
b0 X#
0,
b0 -
b0 3"
b0 g"
b0 o"
b0 R#
b0 /
b0 P#
b0 U#
b0 1
b0 O#
b0 V#
b0 .
b0 Q#
b0 T#
b0 6
b0 *#
b0 N#
b0 $
b0 >
b0 $#
b0 &
b0 =
b0 %#
07
b0 8
b0 4"
b0 )#
b0 M#
b0 "
b0 ?
b0 <"
b0 E"
b0 ##
b0 I#
b0 <
b0 r"
b0 &#
b100000 k"
b0 K
b0 P"
b0 c"
b0 G#
b0 G
b0 7#
b0 H#
1F#
16#
1!
1)
#510
b100 4
b100 m
b100 2
b100 l
b100 x"
b0 o
b0 g
b0 &"
b0 J"
b100 3
b100 m"
b100 v"
b100 ;
b100 q"
b100 L#
b0 R
b0 {"
b0 C#
b0 d
b0 *"
b0 9#
b0 b
b0 "#
b0 :#
b0 a
b0 !#
b0 ;#
0S
0Z
b0 e
b0 r
b0 8#
b0 T
b0 \"
b0 |"
b0 B#
b0 `
b0 I"
b0 <#
b0 Y
b0 @"
b0 ~"
b0 =#
#520
b0 y#
b0 x#
b0 w#
b0 v#
b0 u#
b0 t#
b0 s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
b0 m#
b0 l#
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 f
b0 k
b0 )"
b0 y"
b0 v
b0 w
b0 q
b0 p
b0 s
b0 %"
#530
0H
0A
bx L
bx Q"
bx ]"
b0 N
b0 R"
b0 .#
b0 P
b0 T"
b0 ,#
bz00000 Q
bz00000 U"
bz00000 +#
b0 O
b0 S"
b0 -#
#550
0!
#590
bx y
bx z
bx #"
bx $"
#600
b100000000110 `"
b11100000000000000000000 ^"
b100000000010 b"
b11 _"
b111 a"
b10011 L"
b111 3#
b11 4#
b111 ["
b111 f"
b100 *
b100 ;"
b100 D"
b100 h"
b100 s"
b100 Y#
b11100000000000110010011 K
b11100000000000110010011 P"
b11100000000000110010011 c"
b11100000000000110010011 G#
b100 G
b100 7#
b100 H#
bx /
bx P#
bx U#
b100 .
b100 Q#
b100 T#
b100 j
b100 l"
b100 w"
b100 E#
0F#
06#
1!
b11100000000000110010011 '
b11100000000000110010011 D#
0)
#610
b1000 4
b1000 m
b1000 2
b1000 l
b1000 x"
b1000 3
b1000 m"
b1000 v"
b10 R
b10 {"
b10 C#
bz00000 e
bz00000 r
bz00000 8#
b111 U
b111 5"
b111 }"
b111 A#
b11 T
b11 \"
b11 |"
b11 B#
b100 Y
b100 @"
b100 ~"
b100 =#
#630
b111 M
b111 d"
b111 /#
b10 L
b10 Q"
b10 ]"
1H
1A
#650
0!
#700
b0 *
b0 ;"
b0 D"
b0 h"
b0 s"
b0 Y#
b1000 j
b1000 l"
b1000 w"
b1000 E#
b10 +
b10 S#
b10 X#
b11 -
b11 3"
b11 g"
b11 o"
b11 R#
b10 6
b10 *#
b10 N#
b111 9
b111 p"
b111 (#
b11 8
b11 4"
b11 )#
b11 M#
b100 <
b100 r"
b100 &#
1!
#710
b1100 4
b1100 m
b1100 2
b1100 l
b1100 x"
b111 o
b111 g
b111 &"
b111 J"
b1100 3
b1100 m"
b1100 v"
b1000 ;
b1000 q"
b1000 L#
1S
1Z
b111 `
b111 I"
b111 <#
#720
b111 f
b111 k
b111 )"
b111 y"
b1 v
b1 w
b111 q
b111 p
b11111111111111111111111111111001 s
b111 %"
#750
0!
#790
b0 y
b0 z
b0 #"
b0 $"
#800
b1100 G
b1100 7#
b1100 H#
17
b111 "
b111 ?
b111 <"
b111 E"
b111 ##
b111 I#
b1000 .
b1000 Q#
b1000 T#
b1100 j
b1100 l"
b1100 w"
b1100 E#
1!
#810
b10000 4
b10000 m
b10000 2
b10000 l
b10000 x"
b10000 3
b10000 m"
b10000 v"
b1100 Y
b1100 @"
b1100 ~"
b1100 =#
#850
0!
#900
b111 *
b111 ;"
b111 D"
b111 h"
b111 s"
b111 Y#
b10000 j
b10000 l"
b10000 w"
b10000 E#
1,
b111 1
b111 O#
b111 V#
b1100 <
b1100 r"
b1100 &#
1!
#910
b10100 4
b10100 m
b10100 2
b10100 l
b10100 x"
b10100 3
b10100 m"
b10100 v"
b10000 ;
b10000 q"
b10000 L#
#950
0!
#1000
b10100 G
b10100 7#
b10100 H#
b10000 .
b10000 Q#
b10000 T#
b10100 j
b10100 l"
b10100 w"
b10100 E#
1!
#1010
b11000 4
b11000 m
b11000 2
b11000 l
b11000 x"
b11000 3
b11000 m"
b11000 v"
b10100 Y
b10100 @"
b10100 ~"
b10100 =#
#1020
b111 ]#
#1050
0!
#1100
b11000 j
b11000 l"
b11000 w"
b11000 E#
b10100 <
b10100 r"
b10100 &#
1!
